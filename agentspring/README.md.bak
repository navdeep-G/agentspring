# AgentFlow Developer Guide

AgentFlow is a generic framework for building agentic, LLM-powered, multi-tenant APIs. This guide explains how to extend the framework and build your own apps.

## Extension Points & Minimal Workflow
- **Endpoints**: Implement your own FastAPI endpoints in an app module (e.g., `my_custom_agent/endpoints.py`).
- **LLM Helpers**: Use one-liner helpers: `classify`, `summarize`, `detect_priority`, `extract_structured_data`.
- **Async Tasks**: Use `@agentflow_task` for Celery tasks (handles progress, retry, result).
- **Batch Processing**: Use `batch_process` for one-liner batch submission.
- **Standard Endpoints**: Register `/task/{task_id}` and `/batch` with `standard_endpoints`.
- **Tenant Management**: Add `tenant_router` for plug-and-play tenant endpoints.
- **Admin Dashboard**: Add custom panels or metrics by extending the dashboard templates and logic.
- **Interaction Logging**: Use the built-in logging, or extend it for your use case.
- **Extension Hooks**: Register admin panels, metrics, background tasks, and event hooks:
  ```python
  from agentflow import register_admin_panel, register_metrics_hook, register_background_task, register_event_hook

  @register_admin_panel
  def my_panel():
      ...

  @register_metrics_hook
  def my_metrics():
      ...

  @register_background_task
  def my_task():
      ...

  @register_event_hook("pre_request")
  def before_request():
      ...
  ```

## CLI: App Scaffolding
You can quickly scaffold a new app using the built-in CLI:
```bash
python -m agentflow.cli create-app MyNewAgent
```
This will create a new directory `mynewagent/` with a minimal `endpoints.py` and `README.md`.

## How to Register an App
- Your app must expose a FastAPI `app` in its main module (e.g., `endpoints.py`).
- Set the environment variable:
  ```bash
  export AGENTFLOW_APP=examples.customer_support_agent.endpoints
  python main.py
  ```
- AgentFlow will import and run your app.

## Example App Structure
```
mynewagent/
  endpoints.py   # Must expose a FastAPI app
  tools.py       # (Optional) Custom tools/agents
  templates/     # (Optional) Custom templates
  static/        # (Optional) Static files
```

## Reference
- See `examples/starter_agent/` for a minimal template.
- See `examples/simple_agent/` for a concise, production-ready example.
- See `examples/customer_support_agent/` for a full-featured, advanced example.

## Contributing
- PRs for new extension points, plugins, or improvements are welcome! 